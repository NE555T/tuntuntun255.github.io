<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>屯屯屯</title>
  
  <subtitle>一个烫烫烫锟斤拷??□□□的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tuntuntun.net/"/>
  <updated>2018-05-26T12:11:42.723Z</updated>
  <id>http://tuntuntun.net/</id>
  
  <author>
    <name>tuntuntun255</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VC++动态生成并动态调用dll</title>
    <link href="http://tuntuntun.net/C-%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E5%B9%B6%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8dll.html"/>
    <id>http://tuntuntun.net/C-动态生成并动态调用dll.html</id>
    <published>2018-05-26T11:50:00.000Z</published>
    <updated>2018-05-26T12:11:42.723Z</updated>
    
    <content type="html"><![CDATA[<p>在使用MFC编写程序时，MFC的界面过于古老，要想有一个具有现代感的界面就需要使用第三方的库。然而在使用第三方的皮肤时，程序需要在运行时动态链接到外部库。但这会使程序显得过于臃肿。如程序过分依赖外部的dll文件，当用户无心删掉一个dll文件便会导致程序无法启动。二来本人所写的程序实现功能相对单一，体积不大，为了使程序显得精简，拿来就能用，于是便想到了动态生成dll并动态调用dll这一方法。</p><p>这样程序相当于内置了SkinMagic第三方皮肤，而无需再把dll文件放在程序外面。<br>具体流程：程序开始运行–&gt;生成dll文件–&gt;动态调用dll并加载皮肤–&gt;初始化完成正式运行–&gt;程序关闭–&gt;删除dll文件</p><p>想要把dll文件等资源动态导出，就需要先把资源文件加载到程序中。</p><p>以下引用<a href="http://blog.csdn.net/cardinal_508/article/details/8628709" target="_blank" rel="noopener">http://blog.csdn.net/cardinal_508/article/details/8628709</a><br>首先把想要导出的资源导入，这里简单描述DLL资源导入的步骤：</p><ul><li><p>1.在Resource View（资源视图）中查找到相应工程；</p></li><li><p>2.使用Add（添加）-&gt;Resource（资源）；</p></li><li><p>3.选择Imort（插入）资源；</p></li><li>4.在选择资源后弹出Custom ResourceType（自定义资源类型）输入自定义的类型名，至此资源插入完毕；</li></ul><p>所需函数：<br>FindResource确定指定模块中指定类型和名称所在的位置<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HRSRC <span class="title">FindResource</span><span class="params">(HMODULE hModule,  </span></span></span><br><span class="line"><span class="function"><span class="params">    LPCTSTR lpName,  </span></span></span><br><span class="line"><span class="function"><span class="params">    LPCTSTR lpType)</span></span></span><br></pre></td></tr></table></figure></p><p>hModule处理包含资源的可执行文件的模块，NULL值指定了模块句柄指向操作系统通常情况下创建最近过程的相关文件；</p><p>lpName指定资源名称；</p><p>lpType指定资源的类型，就是上面所自定义资源类型；</p><p>SizeofResource返回指定资源字节数大小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD <span class="title">SizeofResource</span><span class="params">(HMODULE hModule,  </span></span></span><br><span class="line"><span class="function"><span class="params">    HRSRC hReslnfo)</span></span></span><br></pre></td></tr></table></figure><p>hModule包含资源的可执行文件的句柄，如果为空当前文件(我是这么理解的)；</p><p>hReslnfo资源句柄，句柄必须使用FindResource函数创建；</p><p>如果返回0则失败，通过DWORD的寻址范围可看出文件的最大大小；</p><p>LoadResource该函数装载指定资源到全局储存器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HGLOBAL <span class="title">LoadResource</span><span class="params">(HMODULE hModule,  </span></span></span><br><span class="line"><span class="function"><span class="params">    HRSRC hReslnfo)</span></span></span><br></pre></td></tr></table></figure><p>参数同上</p><p>如果运行成功返回相关资源的句柄，如果运行失败返回NULL</p><p>LockResource锁定内存中的指定资源；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LPVOID <span class="title">LockResource</span><span class="params">(HGLOBAL hResData)</span></span></span><br></pre></td></tr></table></figure><p>失败返回NULL，成功返回资源指针，可以重IO输出成文件</p><p>释放相关资源函数：</p><p>CloseHandle ()</p><p>FreeResource ()</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">HRSRC hRsrc = FindResource(<span class="literal">NULL</span>, MAKEINTRESOURCE(IDR_DLL1), TEXT(<span class="string">"DLL"</span>));  </span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == hRsrc)&#123;  </span><br><span class="line">    <span class="keyword">return</span>;&#125;  </span><br><span class="line">DWORD dwSize = SizeofResource(<span class="literal">NULL</span>, hRsrc);   </span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == dwSize)&#123;  </span><br><span class="line">    <span class="keyword">return</span>;&#125;  </span><br><span class="line">HGLOBAL gl = LoadResource(<span class="literal">NULL</span>, hRsrc);   </span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == gl)&#123;  </span><br><span class="line">    <span class="keyword">return</span>;&#125;   </span><br><span class="line">LPVOID lp = LockResource(gl);   </span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == lp)&#123;  </span><br><span class="line">    <span class="keyword">return</span>;&#125;  </span><br><span class="line">CString filename=<span class="string">"dd.dll"</span>;  </span><br><span class="line">HANDLE fp= CreateFile(filename ,GENERIC_WRITE,<span class="number">0</span>,<span class="literal">NULL</span>,CREATE_ALWAYS,<span class="number">0</span>,<span class="literal">NULL</span>);   </span><br><span class="line">DWORD a;   </span><br><span class="line"><span class="keyword">if</span> (!WriteFile (fp,lp,dwSize,&amp;a,<span class="literal">NULL</span>))&#123;  </span><br><span class="line">    <span class="keyword">return</span>;&#125;  </span><br><span class="line">CloseHandle (fp);  </span><br><span class="line">FreeResource (gl);</span><br></pre></td></tr></table></figure><p>生成好dll文件就可以动态调用了</p><p>以下引用<a href="http://blog.csdn.net/freebot/article/details/4312191" target="_blank" rel="noopener">http://blog.csdn.net/freebot/article/details/4312191</a><br>动态调用动态库步骤：</p><ul><li>1、创建一个函数指针，其指针数据类型要与调用的DLL引出函数相吻合。</li><li>2、通过Win32 API函数LoadLibrary（）显式的调用DLL，此函数返回DLL的实例句柄。</li><li>3、通过Win32 API函数GetProcAddress（）获取要调用的DLL的函数地址,把结果赋给自定义函数的指针类型。</li><li>4、使用函数指针来调用DLL函数。</li><li>5、最后调用完成后，通过Win32 API函数FreeLibrary()释放DLL函数。</li></ul><p>例如：在test.dll文件中有一个int Add(int a,int b)的函数，现在调用test.dll文件的Add函数，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(_stdcall * AddProc)</span><span class="params">(<span class="keyword">int</span> , <span class="keyword">int</span> )</span></span>;<span class="comment">//定义函数指针类型  </span></span><br><span class="line">  </span><br><span class="line"> HINSTANCE hInst;  </span><br><span class="line">  </span><br><span class="line"> hInst=LoadLibrary(<span class="string">"test.dll"</span>);<span class="comment">//动态加载Dll  </span></span><br><span class="line">  </span><br><span class="line"> AddProc Add=(AddProc)GetProcAddress(hInst,<span class="string">"add"</span>);<span class="comment">//获取Dll的导出函数  </span></span><br><span class="line">   </span><br><span class="line"> <span class="keyword">if</span>(!Add)  </span><br><span class="line"> &#123;  </span><br><span class="line">  MessageBox(<span class="string">"获取Add函数地址失败！"</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line"> CString stradd;  </span><br><span class="line"> stradd.Format(<span class="string">"5+3=%d"</span>,Add(<span class="number">5</span>,<span class="number">3</span>));  </span><br><span class="line"> MessageBox(stradd);  </span><br><span class="line">  </span><br><span class="line"> ::FreeLibrary(hInst);<span class="comment">//释放Dll函数</span></span><br></pre></td></tr></table></figure><p>在实际的MFC编程中，dll文件一般在使用前加载完成，对于皮肤文件需要在MFC的InitInstance()初始化函数运行时就要加载完毕。<br>部分代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">CWinApp::InitInstance();</span><br><span class="line"><span class="comment">//-----------------------------------------------------------------将DLL文件及SMF文件加入资源中，程序启动时生成</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//-----------生成</span></span><br><span class="line">    HRSRC hRsrc = FindResource(<span class="literal">NULL</span>, MAKEINTRESOURCE(IDR_DLL1),<span class="string">"DLL"</span>); <span class="comment">//寻找DLL文件 确定指定模块中指定类型和名称所在的位置</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == hRsrc)</span><br><span class="line">        AfxMessageBox(<span class="string">"寻找DLL文件失败！"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        DWORD dwSize = SizeofResource(<span class="literal">NULL</span>, hRsrc); <span class="comment">//返回指定资源字节数大小</span></span><br><span class="line">        HGLOBAL gl = LoadResource(<span class="literal">NULL</span>, hRsrc); <span class="comment">////该函数装载指定资源到全局储存器</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> == gl)</span><br><span class="line">            AfxMessageBox(<span class="string">"装载资源失败！"</span>);</span><br><span class="line">        LPVOID lp = LockResource(gl); <span class="comment">//锁定内存中的指定资源</span></span><br><span class="line">        CString filename=<span class="string">"DiskWatcher.dll"</span>; </span><br><span class="line">        HANDLE fp= CreateFile(filename ,GENERIC_WRITE,<span class="number">0</span>,<span class="literal">NULL</span>,CREATE_ALWAYS,<span class="number">0</span>,<span class="literal">NULL</span>); </span><br><span class="line">        DWORD a; </span><br><span class="line">        <span class="keyword">while</span>(!WriteFile(fp,lp,dwSize,&amp;a,<span class="literal">NULL</span>))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        CloseHandle(fp); </span><br><span class="line">        FreeResource(gl); <span class="comment">//写完了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------动态调用</span></span><br><span class="line">     <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(_stdcall * InitProc)</span><span class="params">(HINSTANCE hInstance, LPCTSTR lpApplication , LPCTSTR lpReserved1,LPCTSTR lpReserved2)</span></span>;<span class="comment">//定义函数指针类型-初始化</span></span><br><span class="line">     <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(_stdcall * IoadProc)</span><span class="params">(HMODULE hModule,LPCTSTR lpSkinName ,LPCTSTR lpType)</span></span>; <span class="comment">//加载</span></span><br><span class="line">     <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(_stdcall * SetWindow)</span><span class="params">( HWND hWnd , LPCTSTR lpSkinName )</span></span>; <span class="comment">//应用</span></span><br><span class="line">     <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(_stdcall * SetDialog)</span><span class="params">( LPCTSTR szSkinName )</span></span>;    <span class="comment">//应用</span></span><br><span class="line">     <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(_stdcall * SetSingleDialog)</span><span class="params">( HWND hWnd , LPCTSTR szSkinName )</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(_stdcall * EnableWindowScrollbar)</span><span class="params">(HWND hWnd ,<span class="keyword">int</span> fnBar)</span></span>;<span class="comment">// </span></span><br><span class="line">     </span><br><span class="line">     HINSTANCE hInst;</span><br><span class="line">     hInst=LoadLibrary(<span class="string">".\\DiskWatcher.dll"</span>);<span class="comment">//动态加载Dll</span></span><br><span class="line">     InitProc InitSkinMagicLib=(InitProc)GetProcAddress(hInst,<span class="string">"InitSkinMagicLib"</span>);<span class="comment">//获取Dll的导出函数</span></span><br><span class="line">     IoadProc LoadSkinFromResource=(IoadProc)GetProcAddress(hInst,<span class="string">"LoadSkinFromResource"</span>);<span class="comment">//获取Dll的导出函数</span></span><br><span class="line">     SetWindow SetWindowSkin=(SetWindow)GetProcAddress(hInst,<span class="string">"SetWindowSkin"</span>);</span><br><span class="line">     SetDialog SetDialogSkin=(SetDialog)GetProcAddress(hInst,<span class="string">"SetDialogSkin"</span>);</span><br><span class="line">     SetSingleDialog SetSingleDialogSkin=(SetSingleDialog)GetProcAddress(hInst,<span class="string">"SetDialogSkin"</span>);</span><br><span class="line">     EnableWindowScrollbar EnableWindowScrollbarSkin = (EnableWindowScrollbar)GetProcAddress(hInst,<span class="string">"SetDialogSkin"</span>);</span><br></pre></td></tr></table></figure></p><p>当然用完了就要删除，删除命令需要写在程序窗口关闭时：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INT_PTR nResponse = dlg.DoModal();</span><br><span class="line">    ::FreeLibrary(hInst);<span class="comment">//-----------------------释放</span></span><br><span class="line">    remove(<span class="string">".\\DiskWatcher.dll"</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用MFC编写程序时，MFC的界面过于古老，要想有一个具有现代感的界面就需要使用第三方的库。然而在使用第三方的皮肤时，程序需要在运行时动态链接到外部库。但这会使程序显得过于臃肿。如程序过分依赖外部的dll文件，当用户无心删掉一个dll文件便会导致程序无法启动。二来本人所写
      
    
    </summary>
    
      <category term="VC++" scheme="http://tuntuntun.net/categories/VC/"/>
    
    
      <category term="VC++" scheme="http://tuntuntun.net/tags/VC/"/>
    
      <category term="MFC" scheme="http://tuntuntun.net/tags/MFC/"/>
    
      <category term="dll" scheme="http://tuntuntun.net/tags/dll/"/>
    
      <category term="Windows" scheme="http://tuntuntun.net/tags/Windows/"/>
    
      <category term="SkinMagic" scheme="http://tuntuntun.net/tags/SkinMagic/"/>
    
  </entry>
  
  <entry>
    <title>修改Android源码使property中ro属性可重复修改</title>
    <link href="http://tuntuntun.net/%E4%BF%AE%E6%94%B9Android%E6%BA%90%E7%A0%81%E4%BD%BFro%E5%B1%9E%E6%80%A7%E5%8F%AF%E9%87%8D%E5%86%99.html"/>
    <id>http://tuntuntun.net/修改Android源码使ro属性可重写.html</id>
    <published>2018-05-17T03:42:00.000Z</published>
    <updated>2018-05-26T12:14:08.427Z</updated>
    
    <content type="html"><![CDATA[<h4 id="property-ro-xxx属性介绍"><a href="#property-ro-xxx属性介绍" class="headerlink" title="property ro.xxx属性介绍"></a>property ro.xxx属性介绍</h4><p>ro的英文缩写是Read Only，故在Android系统中，带有ro.的属性都是只读而不可被重复修改的。ro.xxx属性的property通常在系统启动的时候就通过property_set()函数被写在了系统中，而ro属性每次系统启动只能写一次，顾一但设定便不可修改。</p><h4 id="setprop"><a href="#setprop" class="headerlink" title="setprop"></a>setprop</h4><p>在system/core/toobox下有许多常用的命令的源码，setprop由setprop.c生成<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cutils/properties.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setprop_main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"usage: setprop &lt;key&gt; &lt;value&gt;\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(property_set(argv[<span class="number">1</span>], argv[<span class="number">2</span>]))&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"could not set property\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>setprop调用了property_set(const char <em>key, const char </em>value)函数，该函数位于system/core/libcutils下，在这里，最后跳转到了__system_property_set函数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_LIBC_SYSTEM_PROPERTIES</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _REALLY_INCLUDE_SYS__SYSTEM_PROPERTIES_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/_system_properties.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">property_set</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *key, <span class="keyword">const</span> <span class="keyword">char</span> *value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> __system_property_set(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __system_property_set(<span class="keyword">const</span> <span class="keyword">char</span> *key, <span class="keyword">const</span> <span class="keyword">char</span> *value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="number">0</span>) value = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(key) &gt;= PROP_NAME_MAX) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(value) &gt;= PROP_VALUE_MAX) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    prop_msg msg;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;msg, <span class="number">0</span>, <span class="keyword">sizeof</span> msg);</span><br><span class="line">    msg.cmd = PROP_MSG_SETPROP;</span><br><span class="line">    strlcpy(msg.name, key, <span class="keyword">sizeof</span> msg.name);</span><br><span class="line">    strlcpy(msg.value, value, <span class="keyword">sizeof</span> msg.value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> err = send_prop_msg(&amp;msg);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  由于property_set与prop系统服务进程的通信方式主要是通过socket来设置对应的property，而__system_property_set主要作用便是与prop系统服务进程进行通信的。如上代码中，该函数通过send_prop_msg函数发送PROP_MSG_SETPROP命令告知prop系统服务进程写入property。send_prop_msg()函数通过存放在/dev/socket/下的socket本地套接字与服务进程通信。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> property_service_socket[] = <span class="string">"/dev/socket/"</span> PROP_SERVICE_NAME;</span><br></pre></td></tr></table></figure></p><p>prop服务进程在system/core/init下的property_service.c内定义。它通过socket接收来自客户端的消息，通过解析客户端发来的消息内容进行相关操作。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(msg.cmd) &#123;</span><br><span class="line">   <span class="keyword">case</span> PROP_MSG_SETPROP:</span><br><span class="line">       msg.name[PROP_NAME_MAX<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">       msg.value[PROP_VALUE_MAX<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (!is_legal_property_name(msg.name, <span class="built_in">strlen</span>(msg.name))) &#123;</span><br><span class="line">           ERROR(<span class="string">"sys_prop: illegal property name. Got: \"%s\"\n"</span>, msg.name);</span><br><span class="line">           close(s);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">······</span><br></pre></td></tr></table></figure></p><h4 id="使ro属性可重复被修改"><a href="#使ro属性可重复被修改" class="headerlink" title="使ro属性可重复被修改"></a>使ro属性可重复被修改</h4><p>在服务进程接收到客户端发来的PROP_MSG_SETPROP命令时，服务进程会判断将要修改的property是否是ro属性，如果是ro属性且已经存在程序直接返回，对property不做任何修改。<br>通过修改system/core/init/property_service.c 下的void handle_property_set_fd()函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">switch</span>(msg.cmd) &#123;</span><br><span class="line"> <span class="keyword">case</span> PROP_MSG_SETPROP:</span><br><span class="line">     msg.name[PROP_NAME_MAX<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">     msg.value[PROP_VALUE_MAX<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (!is_legal_property_name(msg.name, <span class="built_in">strlen</span>(msg.name))) &#123;</span><br><span class="line">         ERROR(<span class="string">"sys_prop: illegal property name. Got: \"%s\"\n"</span>, msg.name);</span><br><span class="line">         close(s);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     getpeercon(s, &amp;source_ctx);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span>(<span class="built_in">memcmp</span>(msg.name,<span class="string">"ctl."</span>,<span class="number">4</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">// Keep the old close-socket-early behavior when handling</span></span><br><span class="line">         <span class="comment">// ctl.* properties.</span></span><br><span class="line">         close(s);</span><br><span class="line">         <span class="keyword">if</span> (check_control_mac_perms(msg.value, source_ctx)) &#123;</span><br><span class="line">             handle_control_message((<span class="keyword">char</span>*) msg.name + <span class="number">4</span>, (<span class="keyword">char</span>*) msg.value);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             ERROR(<span class="string">"sys_prop: Unable to %s service ctl [%s] uid:%d gid:%d pid:%d\n"</span>,</span><br><span class="line">                     msg.name + <span class="number">4</span>, msg.value, cr.uid, cr.gid, cr.pid);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (check_perms(msg.name, source_ctx) </span><br><span class="line">|| (<span class="number">0</span> == <span class="built_in">strcmp</span>(msg.name, <span class="string">"ro.serialno"</span>)) </span><br><span class="line">|| (<span class="number">0</span> == <span class="built_in">strcmp</span>(msg.name, <span class="string">"ro.deviceid"</span>))) <span class="comment">//mod to let 'ro.xxx' can be modifiy</span></span><br><span class="line">&#123;</span><br><span class="line">             property_set((<span class="keyword">char</span>*) msg.name, (<span class="keyword">char</span>*) msg.value);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             ERROR(<span class="string">"sys_prop: permission denied uid:%d  name:%s\n"</span>,</span><br><span class="line">                   cr.uid, msg.name);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Note: bionic's property client code assumes that the</span></span><br><span class="line">         <span class="comment">// property server will not close the socket until *AFTER*</span></span><br><span class="line">         <span class="comment">// the property is written to memory.</span></span><br><span class="line">         close(s);</span><br></pre></td></tr></table></figure></p><p>以及int property_set(const char <em>name, const char </em>value)函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">property_set</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> <span class="keyword">char</span> *value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    prop_info *pi;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> namelen = <span class="built_in">strlen</span>(name);</span><br><span class="line">    <span class="keyword">size_t</span> valuelen = <span class="built_in">strlen</span>(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!is_legal_property_name(name, namelen)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (valuelen &gt;= PROP_VALUE_MAX) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    pi = (prop_info*) __system_property_find(name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pi != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* ro.* properties may NEVER be modified once set */</span></span><br><span class="line"><span class="keyword">if</span>((<span class="number">0</span> == <span class="built_in">strcmp</span>(name, <span class="string">"ro.serialno"</span>)) </span><br><span class="line">       || (<span class="number">0</span> == <span class="built_in">strcmp</span>(name, <span class="string">"ro.deviceid"</span>)))<span class="comment">//mod to let 'ro.xxx' can be modifiy</span></span><br><span class="line">&#123;;;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(name, <span class="string">"ro."</span>, <span class="number">3</span>) ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//if(!strncmp(name, "ro.", 3) ) return -1;</span></span><br><span class="line"></span><br><span class="line">        __system_property_update(pi, value, valuelen);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = __system_property_add(name, namelen, value, valuelen);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ERROR(<span class="string">"Failed to set '%s'='%s'\n"</span>, name, value);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这样就可以实现对特定ro属性的property进行多次修改！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;property-ro-xxx属性介绍&quot;&gt;&lt;a href=&quot;#property-ro-xxx属性介绍&quot; class=&quot;headerlink&quot; title=&quot;property ro.xxx属性介绍&quot;&gt;&lt;/a&gt;property ro.xxx属性介绍&lt;/h4&gt;&lt;p&gt;ro
      
    
    </summary>
    
      <category term="Android系统" scheme="http://tuntuntun.net/categories/Android%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="android" scheme="http://tuntuntun.net/tags/android/"/>
    
      <category term="property" scheme="http://tuntuntun.net/tags/property/"/>
    
      <category term="ro" scheme="http://tuntuntun.net/tags/ro/"/>
    
      <category term="只读" scheme="http://tuntuntun.net/tags/%E5%8F%AA%E8%AF%BB/"/>
    
      <category term="修改" scheme="http://tuntuntun.net/tags/%E4%BF%AE%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>用三极管替代MAX232电平转换芯片！RS232串口转TTL</title>
    <link href="http://tuntuntun.net/%E7%94%A8%E4%B8%89%E6%9E%81%E7%AE%A1%E6%9B%BF%E4%BB%A3MAX3232%E5%B0%86RS232%E8%BD%AC%E4%B8%BATTL%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html"/>
    <id>http://tuntuntun.net/用三极管替代MAX3232将RS232转为TTL及注意事项.html</id>
    <published>2018-05-13T14:38:00.000Z</published>
    <updated>2018-05-13T16:49:58.887Z</updated>
    
    <content type="html"><![CDATA[<p>当需要用PC与RS232接口的设备通信而又没有MAX232芯片的设备时，可以通过FT232或PL2303等USB转串口芯片电路连接到一种只要3.3V或5V供电的简单的电平转换电路即可正常的与设备通信！</p><p><strong><em> <a href="https://baike.baidu.com/item/RS-232/2022036?fr=aladdin&amp;fromid=3555506&amp;fromtitle=rs232" target="_blank" rel="noopener">RS232</a>简介</em></strong></p><h4 id="原理图："><a href="#原理图：" class="headerlink" title="原理图："></a>原理图：</h4><p><img src="/images/pasted-2.png" alt="RS232转TTL电平原理图"></p><p>RS232的逻辑电压范围为-15V~+15V，其中<br><strong><em>-15V~-3V</em></strong>为逻辑<strong><em>1</em></strong>、<strong><em>3V~15V</em></strong>为逻辑0。</p><p>发出的数据经过TXD从PCRXD发出，接收的数据从PCTXD进入通过RXD接收。</p><p>当PCTXD为逻辑1时，PCTXD为负电压，此时二极管D1导通，给电容C7充电，从而使电容顶端呈负电压；<br>当PCTXD为逻辑0时，PCTXD为正电压，图中9013射极为0V，所以基极与射极见有电压差，且大于0.7V，故使9013导通，RXD端由未导通时的5V被三极管拉低为0V，PCTXD至RXD完成接收动作。</p><p>当TXD为5V时（逻辑1），三极管9012的基极与射极间电压为0V，处于不导通状态。此时PCRXD处电压等于电容C7顶端电压，即负电压，此时PCRXD为逻辑1；<br>当TXD为0V时（逻辑0），三极管9012的基极与射极间电压为（-5）V，处于导通状态，此时PCRXD直接接入5V电源由于电阻R7的存在，PCRXD的电压等于电源电压即5V（逻辑0）；TXD至PCRXD完成发送动作。</p><h4 id="实物图如下"><a href="#实物图如下" class="headerlink" title="实物图如下:"></a>实物图如下:</h4><p><img src="/images/pasted-11.png" alt="实物图"><br>图中所用PNP三极管为9015，NPN三极管为9014。</p><h4 id="个人在使用此电路时发现需要注意如下："><a href="#个人在使用此电路时发现需要注意如下：" class="headerlink" title="个人在使用此电路时发现需要注意如下："></a>个人在使用此电路时发现需要注意如下：</h4><ul><li>TXD应与VCC尽量相同，相差大于0.7V时可能会不发送数据。</li></ul><pre><code>当VCC为5V、TXD采用3.3V为逻辑1时，由于3.3V与5V相差1.7V大于了9012的导通电压，故会使三极管9012一直处于导通状态，无法发送数据。3.3V为逻辑1的电路可以采用VCC=3.3V供电或在9012上加二极管降压到3.3V，也可以在TXD端加三极管将3.3V转为5V。</code></pre><ul><li>供电电源VCC应大于3V，低于3V不满足RS232对电平要求。</li><li>经本人测试使用9015与9014对管制作的电路，在波特率为115200下收发正常。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当需要用PC与RS232接口的设备通信而又没有MAX232芯片的设备时，可以通过FT232或PL2303等USB转串口芯片电路连接到一种只要3.3V或5V供电的简单的电平转换电路即可正常的与设备通信！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; &lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="电子电路" scheme="http://tuntuntun.net/categories/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/"/>
    
    
      <category term="RS232 " scheme="http://tuntuntun.net/tags/RS232/"/>
    
      <category term="串口" scheme="http://tuntuntun.net/tags/%E4%B8%B2%E5%8F%A3/"/>
    
      <category term="TTL" scheme="http://tuntuntun.net/tags/TTL/"/>
    
      <category term="电平转换" scheme="http://tuntuntun.net/tags/%E7%94%B5%E5%B9%B3%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="MAX232" scheme="http://tuntuntun.net/tags/MAX232/"/>
    
  </entry>
  
</feed>
